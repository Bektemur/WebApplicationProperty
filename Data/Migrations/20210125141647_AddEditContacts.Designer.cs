// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplicationProperty.Data;

namespace WebApplicationProperty.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210125141647_AddEditContacts")]
    partial class AddEditContacts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApplicationProperty.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("WebApplicationProperty.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WebApplicationProperty.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("WebApplicationProperty.Models.FileOnFileSystemModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("FilesOnFileSystem");
                });

            modelBuilder.Entity("WebApplicationProperty.Models.Improvement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Improvements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Parking",
                            Type = 2
                        },
                        new
                        {
                            Id = 2,
                            Name = "TV",
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Refrigerator",
                            Type = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "Washing Machine",
                            Type = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "Kitchen",
                            Type = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "Balcony",
                            Type = 2
                        },
                        new
                        {
                            Id = 7,
                            Name = "Internet",
                            Type = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "Drying Machine",
                            Type = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Private garden",
                            Type = 2
                        },
                        new
                        {
                            Id = 10,
                            Name = "Roof Terrace",
                            Type = 2
                        },
                        new
                        {
                            Id = 11,
                            Name = "Open kitchen",
                            Type = 2
                        },
                        new
                        {
                            Id = 12,
                            Name = "Cooker Hob & Hood",
                            Type = 2
                        },
                        new
                        {
                            Id = 13,
                            Name = "Closed kitchen",
                            Type = 2
                        },
                        new
                        {
                            Id = 14,
                            Name = "Water Heater",
                            Type = 2
                        },
                        new
                        {
                            Id = 15,
                            Name = "Common garden",
                            Type = 5
                        },
                        new
                        {
                            Id = 16,
                            Name = "Function Room",
                            Type = 5
                        },
                        new
                        {
                            Id = 17,
                            Name = "Common jacuzzi",
                            Type = 5
                        },
                        new
                        {
                            Id = 18,
                            Name = "Lounge",
                            Type = 5
                        },
                        new
                        {
                            Id = 19,
                            Name = "Restaurant",
                            Type = 5
                        },
                        new
                        {
                            Id = 20,
                            Name = "Building security",
                            Type = 5
                        },
                        new
                        {
                            Id = 21,
                            Name = "Garage",
                            Type = 5
                        },
                        new
                        {
                            Id = 22,
                            Name = "Onsen Spa",
                            Type = 5
                        },
                        new
                        {
                            Id = 23,
                            Name = "Sauna",
                            Type = 5
                        },
                        new
                        {
                            Id = 24,
                            Name = "Cafe",
                            Type = 5
                        },
                        new
                        {
                            Id = 25,
                            Name = "Gym/Fitness",
                            Type = 5
                        },
                        new
                        {
                            Id = 26,
                            Name = "Library",
                            Type = 5
                        },
                        new
                        {
                            Id = 27,
                            Name = "Outdoor swimming pool",
                            Type = 5
                        },
                        new
                        {
                            Id = 28,
                            Name = "Spa",
                            Type = 5
                        },
                        new
                        {
                            Id = 29,
                            Name = "Children playroom",
                            Type = 5
                        },
                        new
                        {
                            Id = 30,
                            Name = "Indoor swimming pool",
                            Type = 5
                        },
                        new
                        {
                            Id = 31,
                            Name = "Lift",
                            Type = 5
                        },
                        new
                        {
                            Id = 32,
                            Name = "Playground",
                            Type = 5
                        },
                        new
                        {
                            Id = 33,
                            Name = "Steamroom",
                            Type = 5
                        },
                        new
                        {
                            Id = 34,
                            Name = "European",
                            Type = 3
                        },
                        new
                        {
                            Id = 35,
                            Name = "Industrial",
                            Type = 3
                        },
                        new
                        {
                            Id = 36,
                            Name = "Minimalistic",
                            Type = 3
                        },
                        new
                        {
                            Id = 37,
                            Name = "Modern",
                            Type = 3
                        },
                        new
                        {
                            Id = 38,
                            Name = "Thai",
                            Type = 3
                        },
                        new
                        {
                            Id = 39,
                            Name = "Not Decorated",
                            Type = 3
                        },
                        new
                        {
                            Id = 40,
                            Name = "Air Conditioning",
                            Type = 4
                        },
                        new
                        {
                            Id = 41,
                            Name = "Bathtub",
                            Type = 4
                        },
                        new
                        {
                            Id = 42,
                            Name = "Oven",
                            Type = 4
                        },
                        new
                        {
                            Id = 43,
                            Name = "Cooking gas",
                            Type = 4
                        },
                        new
                        {
                            Id = 44,
                            Name = "Private Pool",
                            Type = 4
                        },
                        new
                        {
                            Id = 45,
                            Name = "Fan",
                            Type = 4
                        },
                        new
                        {
                            Id = 46,
                            Name = "Stove",
                            Type = 4
                        },
                        new
                        {
                            Id = 47,
                            Name = "Goverment electricity meter",
                            Type = 7
                        },
                        new
                        {
                            Id = 48,
                            Name = "Shopping Mall",
                            Type = 7
                        },
                        new
                        {
                            Id = 49,
                            Name = "Public water meter",
                            Type = 7
                        },
                        new
                        {
                            Id = 50,
                            Name = "Golf Simulator",
                            Type = 7
                        },
                        new
                        {
                            Id = 51,
                            Name = "Co-Working Space",
                            Type = 7
                        },
                        new
                        {
                            Id = 52,
                            Name = "Cleaning service",
                            Type = 7
                        },
                        new
                        {
                            Id = 53,
                            Name = "Mini Market",
                            Type = 7
                        },
                        new
                        {
                            Id = 54,
                            Name = "Mini Market",
                            Type = 7
                        },
                        new
                        {
                            Id = 55,
                            Name = "Wheelchair accessible",
                            Type = 6
                        },
                        new
                        {
                            Id = 56,
                            Name = "Badminton Court",
                            Type = 6
                        },
                        new
                        {
                            Id = 57,
                            Name = "Company Registration",
                            Type = 6
                        },
                        new
                        {
                            Id = 58,
                            Name = "High Floor",
                            Type = 6
                        },
                        new
                        {
                            Id = 59,
                            Name = "Low Floor",
                            Type = 6
                        },
                        new
                        {
                            Id = 60,
                            Name = "Scenic View",
                            Type = 6
                        },
                        new
                        {
                            Id = 61,
                            Name = "BBQ Area",
                            Type = 6
                        },
                        new
                        {
                            Id = 62,
                            Name = "New Project",
                            Type = 6
                        },
                        new
                        {
                            Id = 63,
                            Name = "Pool View",
                            Type = 6
                        },
                        new
                        {
                            Id = 64,
                            Name = "Sea View",
                            Type = 6
                        },
                        new
                        {
                            Id = 65,
                            Name = "Allows Pets",
                            Type = 6
                        },
                        new
                        {
                            Id = 66,
                            Name = "Shuttle service",
                            Type = 6
                        },
                        new
                        {
                            Id = 67,
                            Name = "Jogging Track",
                            Type = 6
                        },
                        new
                        {
                            Id = 68,
                            Name = "Luxury",
                            Type = 6
                        },
                        new
                        {
                            Id = 69,
                            Name = "Park View",
                            Type = 6
                        },
                        new
                        {
                            Id = 70,
                            Name = "Rent Guarantee",
                            Type = 6
                        },
                        new
                        {
                            Id = 71,
                            Name = "Allow Short-term",
                            Type = 6
                        },
                        new
                        {
                            Id = 72,
                            Name = "City View",
                            Type = 6
                        },
                        new
                        {
                            Id = 73,
                            Name = "Lake View",
                            Type = 6
                        },
                        new
                        {
                            Id = 74,
                            Name = "Maid's Room",
                            Type = 6
                        },
                        new
                        {
                            Id = 75,
                            Name = "Penthouse",
                            Type = 6
                        },
                        new
                        {
                            Id = 76,
                            Name = "Partially Furnished",
                            Type = 1
                        },
                        new
                        {
                            Id = 77,
                            Name = "Fully Furnished",
                            Type = 1
                        },
                        new
                        {
                            Id = 78,
                            Name = "Needs renovation",
                            Type = 1
                        },
                        new
                        {
                            Id = 79,
                            Name = "Renovated",
                            Type = 1
                        },
                        new
                        {
                            Id = 80,
                            Name = "To be renovated",
                            Type = 1
                        },
                        new
                        {
                            Id = 81,
                            Name = "Unfurnished",
                            Type = 1
                        });
                });

            modelBuilder.Entity("WebApplicationProperty.Models.ImprovementToProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ImprovementId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImprovementId");

                    b.HasIndex("PropertyId");

                    b.ToTable("ImprovementToProperty");
                });

            modelBuilder.Entity("WebApplicationProperty.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("WebApplicationProperty.Models.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForRent")
                        .HasColumnType("bit");

                    b.Property<bool>("ForSale")
                        .HasColumnType("bit");

                    b.Property<double>("GeoLat")
                        .HasColumnType("float");

                    b.Property<double>("GeoLong")
                        .HasColumnType("float");

                    b.Property<double>("Land_area")
                        .HasColumnType("float");

                    b.Property<double>("Living_area")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Parking")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Price_rent")
                        .HasColumnType("float");

                    b.Property<double>("Price_sqm")
                        .HasColumnType("float");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Public_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<int>("TypePropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update_date")
                        .HasColumnType("datetime2");

                    b.HasKey("PropertyId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ContactId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StationId");

                    b.HasIndex("TypePropertyId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("WebApplicationProperty.Models.Station", b =>
                {
                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("GeoLat")
                        .HasColumnType("float");

                    b.Property<double>("GeoLong")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StationType")
                        .HasColumnType("int");

                    b.HasKey("StationId");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("WebApplicationProperty.Models.TypeProperty", b =>
                {
                    b.Property<int>("TypePropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypePropertyId");

                    b.ToTable("TypeProperties");

                    b.HasData(
                        new
                        {
                            TypePropertyId = 1,
                            Name = "Unspecified"
                        },
                        new
                        {
                            TypePropertyId = 2,
                            Name = "Townhouse"
                        },
                        new
                        {
                            TypePropertyId = 3,
                            Name = "House"
                        },
                        new
                        {
                            TypePropertyId = 4,
                            Name = "Condominium"
                        },
                        new
                        {
                            TypePropertyId = 5,
                            Name = "Appartment"
                        },
                        new
                        {
                            TypePropertyId = 6,
                            Name = "Office"
                        },
                        new
                        {
                            TypePropertyId = 7,
                            Name = "Land"
                        },
                        new
                        {
                            TypePropertyId = 8,
                            Name = "Penthouse"
                        },
                        new
                        {
                            TypePropertyId = 9,
                            Name = "Serviced Apartment"
                        },
                        new
                        {
                            TypePropertyId = 10,
                            Name = "Shop house"
                        },
                        new
                        {
                            TypePropertyId = 11,
                            Name = "Retail"
                        },
                        new
                        {
                            TypePropertyId = 12,
                            Name = "Business"
                        },
                        new
                        {
                            TypePropertyId = 13,
                            Name = "Factory"
                        },
                        new
                        {
                            TypePropertyId = 14,
                            Name = "Commercial Building"
                        },
                        new
                        {
                            TypePropertyId = 15,
                            Name = "Hotel / Resort"
                        },
                        new
                        {
                            TypePropertyId = 16,
                            Name = "Other Commertcial"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("WebApplicationProperty.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApplicationProperty.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApplicationProperty.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("WebApplicationProperty.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationProperty.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApplicationProperty.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplicationProperty.Models.FileOnFileSystemModel", b =>
                {
                    b.HasOne("WebApplicationProperty.Models.Property", null)
                        .WithMany("FileSystemModels")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplicationProperty.Models.ImprovementToProperty", b =>
                {
                    b.HasOne("WebApplicationProperty.Models.Improvement", "Improvement")
                        .WithMany()
                        .HasForeignKey("ImprovementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationProperty.Models.Property", "Property")
                        .WithMany("Improvements")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplicationProperty.Models.Property", b =>
                {
                    b.HasOne("WebApplicationProperty.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("WebApplicationProperty.Models.Contact", "Contact")
                        .WithMany("Properties")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationProperty.Models.Project", "Project")
                        .WithMany("Properties")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationProperty.Models.Station", "Station")
                        .WithMany("Properties")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationProperty.Models.TypeProperty", "TypeProperties")
                        .WithMany("Properties")
                        .HasForeignKey("TypePropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
